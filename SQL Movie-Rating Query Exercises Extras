You've started a new movie-rating website, and you've been collecting data on reviewers' ratings of various movies. There's not much data yet, but you can still try out some interesting queries. Here's the schema: 

Movie ( mID, title, year, director ) 
English: There is a movie with ID number mID, a title, a release year, and a director. 

Reviewer ( rID, name ) 
English: The reviewer with ID number rID has a certain name. 

Rating ( rID, mID, stars, ratingDate ) 
English: The reviewer rID gave the movie mID a number of stars rating (1-5) on a certain ratingDate. 

Q1. Find the names of all reviewers who rated Gone with the Wind. 

using subquery:

SELECT name FROM Reviewer 
WHERE rID in (SELECT rID FROM Rating WHERE mID in(SELECT mID FROM Movie WHERE title='Gone with the Wind'))

using Join:

SELECT DISTINCT name
FROM Movie
INNER JOIN Rating USING(mId)
INNER JOIN Reviewer USING(rId)
WHERE title = "Gone with the Wind";

Q2. For any rating where the reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars. 

SELECT name, title, stars
FROM Reviewer
INNER JOIN Rating USING (rID)
INNER JOIN Movie USING (mID)
WHERE director=name

Q3. Return all reviewer names and movie names together in a single list, alphabetized. (Sorting by the first name of the reviewer and first word in the title is fine; no need for special processing on last names or removing "The".) 

SELECT name
FROM Reviewer 
UNION 
SELECT title FROM Movie
order by name, title

Q4. Find the titles of all movies not reviewed by Chris Jackson. 

SELECT distinct title FROM Movie
WHERE mID NOT IN
(SELECT mID FROM Rating 
INNER JOIN Reviewer USING (rID)
where name= 'Chris Jackson')


Q5. For all pairs of reviewers such that both reviewers gave a rating to the same movie, return the names of both reviewers. Eliminate duplicates, don't pair reviewers with themselves, and include each pair only once. For each pair, return the names in the pair in alphabetical order. 

SELECT DISTINCT R1.name, R2.name FROM Reviewer R1, Reviewer R2, Rating rr1, Rating rr2
where rr1.mID=rr2.mID
AND R1.rID=rr1.rID 
AND R2.rID=rr2.rID 
AND R1.name<R2.name
ORDER BY R1.name, R2.name

Q6. For each rating that is the lowest (fewest stars) currently in the database, return the reviewer name, movie title, and number of stars. 

SELECT name, title, stars
FROM Reviewer INNER JOIN Rating using (rID)
inner join Movie using (mID)
WHERE stars =(SELECT MIN(stars) FROM Rating)


Q7. List movie titles and average ratings, from highest-rated to lowest-rated. If two or more movies have the same average rating, list them in alphabetical order. 

using AVG SQL built-in function:

SELECT title, AVG(stars) AS average
FROM Movie
INNER JOIN Rating USING(mId)
GROUP BY mId
ORDER BY average DESC, title;

using SUM/COUNT to define AVG

SELECT title, CAST(SUM(stars) AS float) / CAST(COUNT(stars) AS float)
from Movie inner JOIN Rating using (mID)
group by mID
order by CAST(SUM(stars) AS float) / CAST(COUNT(stars) AS float) DESC, title

Q8. Find the names of all reviewers who have contributed three or more ratings. (As an extra challenge, try writing the query without HAVING or without COUNT.) 

SELECT name 
FROM Reviewer
WHERE (SELECT count(*) FROM Rating WHERE Rating.rID=Reviewer.rID )>=3

using Having and Count:

SELECT name
FROM Reviewer
INNER JOIN Rating USING(rId)
GROUP BY rId
HAVING COUNT(*) >= 3;

Q9. Some directors directed more than one movie. For all such directors, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title. (As an extra challenge, try writing the query both with and without COUNT.) 

Using count:

SELECT title, director 
FROM Movie 
WHERE director in
(SELECT director FROM Movie GROUP BY director
Having COUNT(title)>=2)
ORDER BY director, title

Without Count:

SELECT m1.title, m1.director 
FROM Movie m1, Movie m2
WHERE m2.director=m1.director AND m1.title!=m2.title
ORDER BY m1.director,m1.title

Q10. Find the movie(s) with the highest average rating. Return the movie title(s) and average rating. (Hint: This query is more difficult to write in SQLite than other systems; you might think of it as finding the highest average rating and then choosing the movie(s) with that average rating.) 

SELECT title, h_avg_rate 
FROM (SELECT title, AVG(stars) AS h_avg_rate FROM Movie join Rating USING (mID)
GROUP BY title
ORDER BY AVG(stars) DESC LIMIT 1)temp

Q11. Find the movie(s) with the lowest average rating. Return the movie title(s) and average rating. (Hint: This query may be more difficult to write in SQLite than other systems; you might think of it as finding the lowest average rating and then choosing the movie(s) with that average rating.) 

SELECT title, AVG(stars) AS low_avg_rating 
FROM Movie JOIN Rating USING (mID) 
GROUP BY title
HAVING AVG(stars)=(SELECT AVG(stars) AS low_avg_rating 
FROM Movie JOIN Rating USING (mID) 
GROUP BY title
ORDER BY AVG(stars)) 

Q12. For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL. 

SELECT director, title, stars
FROM Movie join Rating USING (mID)
where director is not NULL
group by director
having max(stars)
